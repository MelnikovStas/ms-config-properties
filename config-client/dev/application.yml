spring:
  application:
    name: config-client  # Имя этого приложения для идентификации в Spring Cloud
  config:
    import: optional:configserver:http://localhost:8888  # Импорт конфигурации с Config Server (с пометкой optional - приложение запустится даже если Config Server недоступен)
  profiles:
    active: dev  # Активный профиль для этого приложения (определяет, какой набор конфигураций будет использоваться)
  cloud:
    config:
      discovery:
        enabled: true          # Включить обнаружение Config Server через Service Discovery (Eureka)
        service-id: config-server  # Имя сервиса Config Server в реестре Eureka

server:
  port: 8081  # Порт, на котором будет запущено это приложение

eureka:
  client:
    register-with-eureka: true  # Регистрировать это приложение в Eureka Server
    fetch-registry: true        # Загружать реестр сервисов из Eureka
    service-url:
      defaultZone: http://localhost:8761/eureka  # URL Eureka Server для регистрации и получения реестра
  instance:
    lease-renewal-interval-in-seconds: 5  # Интервал отправки heartbeat в Eureka (в секундах)
    lease-expiration-duration-in-seconds: 10  # Время, после которого инстанс будет удален из Eureka, если не обновляется

management:
  endpoints:
    web:
      exposure:
        include: health,info  # Какие actuator endpoints будут доступны через web
  endpoint:
    health:
      show-details: always  # Всегда показывать детали health endpoint (включая статусы отдельных компонентов)
